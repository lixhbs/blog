{"meta":{"title":"煮酒泛舟的技术栈","subtitle":null,"description":null,"author":"煮酒泛舟","url":"https://lixhbs.gitee.io/blog"},"pages":[{"title":"About","date":"2018-09-12T10:57:21.357Z","updated":"2018-09-12T10:57:21.357Z","comments":true,"path":"about/index.html","permalink":"https://lixhbs.gitee.io/blog/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-09-12T10:53:41.000Z","updated":"2018-09-12T10:58:03.129Z","comments":true,"path":"categories/index.html","permalink":"https://lixhbs.gitee.io/blog/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-12T10:55:12.000Z","updated":"2018-09-12T10:58:20.616Z","comments":true,"path":"tags/index.html","permalink":"https://lixhbs.gitee.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"「leetcode」两数之和","slug":"leetcode-001","date":"2018-10-31T02:04:19.000Z","updated":"2018-11-05T01:19:08.245Z","comments":true,"path":"leetcode-001/","link":"","permalink":"https://lixhbs.gitee.io/blog/leetcode-001/","excerpt":"给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。 你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。","text":"给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。 你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 我的解答（暴力） 12345678910111213class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; int n = nums.length; for (int i = 0; i &lt; n; i++) &#123; for (int m = i + 1; m &lt; n; m++) &#123; if ( target - nums[m] == nums[i] ) &#123; return new int[]&#123;i, m&#125;; &#125; &#125; &#125; return null; &#125;&#125; 题目理解 计算出这个数组中两个数字之和为目标数的索引，数组中同样的元素不能复用。 官方答案 方法一： 暴力解法，循环两次，耗时比较长。12345678910public int[] twoSum(int[] nums, int target) &#123; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = i + 1; j &lt; nums.length; j++) &#123; if (nums[j] == target - nums[i]) &#123; return new int[] &#123; i, j &#125;; &#125; &#125; &#125; throw new IllegalArgumentException(&quot;No two sum solution&quot;);&#125; 方法二 可以用哈希表存储元素和对应索引的位置，然后循环比对。由于先将所有的数据都存入HashMap，所以后面判断的时候需要判断是否重复使用。 12345678910111213public int[] twoSum(int[] nums, int target) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; map.put(nums[i], i); &#125; for (int i = 0; i &lt; nums.length; i++) &#123; int complement = target - nums[i]; if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123; return new int[] &#123; i, map.get(complement) &#125;; &#125; &#125; throw new IllegalArgumentException(\"No two sum solution\");&#125; 方法三 参照第二种方法，我们可以一次完成，将目标值和元素的差在HashMap中查找，如果没有则放入HashMap中供下次查找。1234567891011public int[] twoSum(int[] nums, int target) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; int complement = target - nums[i]; if (map.containsKey(complement)) &#123; return new int[] &#123; map.get(complement), i &#125;; &#125; map.put(nums[i], i); &#125; throw new IllegalArgumentException(\"No two sum solution\");&#125;","categories":[],"tags":[]},{"title":"【Spring cloud】第五篇 Custom Zuul Filter | 自定义过滤器","slug":"sc-f-e-05","date":"2018-10-30T10:00:00.000Z","updated":"2018-11-05T01:10:10.790Z","comments":true,"path":"sc-f-e-05/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-05/","excerpt":"Zuul可以分为四种过滤类型：pre、route、post和error，可以根据项目实际情况选择不同的过滤类型，也可以按照filterOrder排序。","text":"Zuul可以分为四种过滤类型：pre、route、post和error，可以根据项目实际情况选择不同的过滤类型，也可以按照filterOrder排序。 本教程在【Spring cloud】第四篇 Router and Filter | 路由和过滤器 - Zuul的基础上添加代码。 Custom Zuul Filter Examples本篇将调试四种过滤类型。 to classify a filter by type. Standard types in Zuul are “pre” for pre-routing filtering, “route” for routing to an origin, “post” for post-routing filters, “error” for error handling. We also support a “static” type for static responses see StaticResponseFilter. Any filterType made be created or added and run by calling FilterProcessor.runFilters(type) pre - 预路由过滤 route - 路由中 post - 路由后 error - 错误处理 How to Write a Pre Filter Pre filters set up data in the RequestContext for use in filters downstream. The main use case is to set information required for route filters 预过滤器在RequestContext中设置数据，以便在下游过滤器中使用。主要用例是设置路由过滤器所需的信息 在server-zuul工程中新建类preZuulServer可以在访问路有前校验是否有权限访问等操作。1234567891011121314151617181920212223242526272829303132333435363738394041424344@Componentpublic class preZuulFilter extends ZuulFilter &#123; @Override public String filterType() &#123; return PRE_TYPE; &#125; @Override public int filterOrder() &#123; // 过滤顺序 return 0; &#125; @Override public boolean shouldFilter() &#123; // 是否过滤 return true; &#125; @Override public Object run() throws ZuulException &#123; RequestContext requestContext = RequestContext.getCurrentContext(); HttpServletRequest request = requestContext.getRequest(); String name = request.getParameter(&quot;name&quot;); if (StringUtils.isNotEmpty(name) &amp;&amp; name.equals(&quot;CHYIT&quot;)) &#123; requestContext.setSendZuulResponse(true); &#125; else &#123; requestContext.setSendZuulResponse(false); try &#123; HttpServletResponse res = requestContext.getResponse(); res.setContentType(&quot;text/html;charset=UTF-8&quot;); res.setCharacterEncoding(&quot;UTF-8&quot;); res.getWriter().write(&quot;用户校验不通过！！！&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; return null; &#125;&#125; 修改eureka-client EurekaClientApplication类 123456789101112public class EurekaClientApplication &#123; @RequestMapping(&quot;/hi&quot;) public String home(String name) &#123; return &quot;Hello world, by eureka-client. name：&quot; + name; &#125; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaClientApplication.class).web(true).run(args); &#125;&#125; 访问：http://192.168.5.165:8084/ec/hi?name=name 用户校验不通过！！！ 放问：http://192.168.5.165:8084/ec/hi?name=CHYIT Hello world, by eureka-client. name：CHYIT 然后创建另外三个类型的过滤类 启动顺序eureka-server &gt; server-zuul 放问：http://192.168.5.165:8084/ec/hi?name=CHYIT GET &gt;&gt;&gt; run by PRE_TYPEGET &gt;&gt;&gt; run by ROUTE_TYPEGET &gt;&gt;&gt; run by ERROR_TYPE 然后启动eureka-client GET &gt;&gt;&gt; run by PRE_TYPEGET &gt;&gt;&gt; run by ROUTE_TYPEGET &gt;&gt;&gt; run by POST_TYPE 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-05/教程源码Github地址：sc-f-e-05教程源码Gitee地址：sc-f-e-05","categories":[],"tags":[]},{"title":"【Spring cloud】第四篇 Router and Filter | 路由和过滤器 - Zuul","slug":"sc-f-e-04","date":"2018-10-29T07:00:01.000Z","updated":"2018-10-31T09:09:06.529Z","comments":true,"path":"sc-f-e-04/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-04/","excerpt":"路由是微服务架构不可或缺的一部分。例如，/可以映射到您的Web应用程序，/api/users映射到用户服务，/api/shop映射到商店服务。 Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器 Routing is an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM-based router and server-side load balancer from Netflix.","text":"路由是微服务架构不可或缺的一部分。例如，/可以映射到您的Web应用程序，/api/users映射到用户服务，/api/shop映射到商店服务。 Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器 Routing is an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM-based router and server-side load balancer from Netflix. 本教程在【Spring Cloud】第三篇 Client Side Load Balancer | 负载均衡 - Ribbon的基础上添加代码。 How to Include Zuul | 项目中如何包含 Zuul To include Zuul in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-zuul. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 添加group ID到 pom.xml，注意自己的版本。 Zuul有几种配置的方式跳过自动添加服务，将zuul.ignored-services 设置服务id列表的模式，如zuul.ignored-services = server-consume或zuul.ignored-services = * 将忽略掉指定或所有的服务，但是如果在路由列表中添加了指定的路由，将不会被忽略，如下所示,除users外将忽略所有服务。 1234zuul: ignoredServices: '*' routes: users: /myusers/** 要增加或者修改路由器规则，可以添加如下配置，浏览器访问/myusers会转发到users服务，如：/myusers/101转发到/101）。123zuul: routes: users: /myusers/** 要对路由器进行更精细的操作，可以指定独立的路径和ServerID（Eureka 服务发现），如下配置：12345zuul: routes: users: path: /myusers/** serviceId: users_service 也可以直接配置http路径的物理位置 12345zuul: routes: users: path: /myusers/** url: http://example.com/users_service 实际操作创建server-zuul工程 完整pom.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;server-zuul&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;server-zuul&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-04&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--Eureka-Client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 修改父工程pom.xml，在modules添加server-ribbon 1&lt;module&gt;server-zuul&lt;/module&gt; 修改ServerZuulApplication12345678910111213141516package com.cyinfotech.serverzuul; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.netflix.zuul.EnableZuulProxy; @SpringBootApplication @EnableDiscoveryClient @EnableZuulProxy public class ServerZuulApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ServerZuulApplication.class, args); &#125; &#125; 在application.yml中添加路由规则 1234567891011121314151617spring: application: name: server-zuulserver: port: 8084eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/zuul: routes: aa: path: /hy/** serviceId: server-hystrix bb: path: /ec/** serviceId: eureka-client 分别在server-hystrix和eureka-client中添加hi服务路径 ServerHystrixApplication 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.cyinfotech.serverhystrix;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.context.annotation.Configuration;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.Map;@SpringBootApplication@EnableCircuitBreaker@EnableDiscoveryClient@RestControllerpublic class ServerHystrixApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(ServerHystrixApplication.class).web(true).run(args); &#125; @Autowired StoreIntegration storeIntegration; @Value(&quot;$&#123;server.port&#125;&quot;) String port; @RequestMapping(&quot;/&quot;) public Object getHi (@RequestParam String name)&#123; return &quot;HI - &quot; + name + &quot;， port:&quot; + port + &quot;, By server-hystrix.&quot;; &#125; @RequestMapping(&quot;/hi&quot;) public Object hi ()&#123; return &quot;HI, By server-hystrix.&quot;; &#125;&#125; EurekaClientApplication package com.cyinfotech.eurekaclient; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @SpringBootApplication @EnableDiscoveryClient @RestController public class EurekaClientApplication { @RequestMapping(&quot;/hi&quot;) public String home() { return &quot;Hello world, by eureka-client.&quot;; } public static void main(String[] args) { new SpringApplicationBuilder(EurekaClientApplication.class).web(true).run(args); } } 访问路由路径:http://localhost:8084/ec/hi Hello world, by eureka-client. 访问路由路径:http://localhost:8084/hy/hi HI, By server-hystrix. 本篇教程就到这，至于更深的教程我会加紧学习然后写出来。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-04/教程源码Github地址：sc-f-e-04教程源码Gitee地址：sc-f-e-04","categories":[],"tags":[]},{"title":"【Spring Cloud】第三篇 Client Side Load Balancer | 负载均衡 - Ribbon","slug":"sc-f-e-03","date":"2018-10-28T03:01:13.588Z","updated":"2018-10-28T03:01:13.588Z","comments":true,"path":"sc-f-e-03/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-03/","excerpt":"Ribbon是一个负载均衡的客户端，用来提高系统的处理能力，在之后的章节会讲到Feign它已经包含Ribbon。","text":"Ribbon是一个负载均衡的客户端，用来提高系统的处理能力，在之后的章节会讲到Feign它已经包含Ribbon。 本教程在【Spring Cloud】第二篇 Circuit Breaker | 断路器 - Hystrix的基础上添加代码。 word &amp; phrase load balancer 负载均衡器 section 章节 A central concept 核心想法 创建工程 server-ribbon How to Include Ribbon | 项目中如何包含 Ribbon To include Ribbon in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-ribbon. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 添加group ID到 pom.xml，注意自己的版本。 123456789101112131415161718192021222324252627282930&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;server-ribbon&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;server-ribbon&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-03&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 修改父工程pom.xml，在modules添加server-ribbon 1&lt;module&gt;server-ribbon&lt;/module&gt; 修改配置文件 application.yml 123456789server: port: 8783eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: server-ribbon 修改启动类ServerRibbonApplication，添加RestTemplate @LoadBalanced的作用是让这个请求有负载均衡的能力。 1234567891011121314151617181920212223package com.cyinfotech.serverribbon;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.web.client.RestTemplate;@SpringBootApplication@EnableDiscoveryClientpublic class ServerRibbonApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ServerRibbonApplication.class, args); &#125; @Bean @LoadBalanced public RestTemplate restTemplate ()&#123; return new RestTemplate(); &#125;&#125; 添加HelloCyInfo服务类，调用其他实例，实现负载均衡 1234567891011121314151617181920212223package com.cyinfotech.serverribbon;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;/** * @author 煮酒泛舟. * @title * @program sc-f-e-03 * @description * @createtime 2018-10-28 09:38 */@Servicepublic class HelloCyInfo &#123; @Autowired RestTemplate restTemplate; public String helloCYIT(String name) &#123; return restTemplate.getForObject(&quot;http://server-hystrix/?name=&quot;+name,String.class); &#125;&#125; 添加RibbonController类，调用service 1234567891011121314151617181920212223242526package com.cyinfotech.serverribbon;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;/** * @author 煮酒泛舟. * @title * @program sc-f-e-03 * @description * @createtime 2018-10-28 09:44 */@RestControllerpublic class RibbonController &#123; @Autowired HelloCyInfo helloCyInfo; @RequestMapping(&quot;/&quot;) public String hiCYIT ( @RequestParam String name) &#123; return helloCyInfo.helloCYIT(name); &#125;&#125; 为了效果明显我们修改下server-hystrix的代码，将实例的端口打印出来； 12345678910111213141516171819202122232425262728293031323334353637package com.cyinfotech.serverhystrix;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.context.annotation.Configuration;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.Map;@SpringBootApplication@EnableCircuitBreaker@EnableDiscoveryClient@RestControllerpublic class ServerHystrixApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(ServerHystrixApplication.class).web(true).run(args); &#125; @Autowired StoreIntegration storeIntegration; @Value(\"$&#123;server.port&#125;\") String port; @RequestMapping(\"/\") public Object getHi (@RequestParam String name)&#123; return \"HI - \" + name + \"， port:\" + port + \", By server-hystrix.\"; &#125;&#125; 先启动 eureka-server，再启动 server-hystrix, 然后启动 server-ribbon 访问浏览器 http://localhost:8783/?name=cyit HI - cyit， port:8782, By server-hystrix. 修改实例server-hystrix的端口然后启动，如果启动不了需要在Configurations去掉Single instance only. 12server: port: 8786 ` 多次访问http://localhost:8783/?name=cyit ， 页面会交替显示端口号。 HI - cyit， port:8782, By server-hystrix.HI - cyit， port:8786, By server-hystrix. 本篇教程就到这，至于更深的教程我会加紧学习然后写出来。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-03/教程源码Github地址：sc-f-e-03教程源码Gitee地址：sc-f-e-03","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"},{"name":"Ribbon","slug":"Spring-Cloud/Ribbon","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/Ribbon/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"【Spring Cloud】第二篇 Circuit Breaker | 断路器 - Hystrix","slug":"sc-f-e-02","date":"2018-10-28T02:42:57.770Z","updated":"2018-10-28T02:42:57.770Z","comments":true,"path":"sc-f-e-02/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-02/","excerpt":"服务意外跪掉后的处理方式，不至于所有的功能失效。","text":"服务意外跪掉后的处理方式，不至于所有的功能失效。 官方网站的这个图很形象,当服务跪掉后有一个fallback返回。 本教程在【参照官方英文文档学Spring Cloud】第一篇 Service Discovery | 服务发现 - Eureka的基础上添加代码。 word &amp; phrase Circuit Breaker 中断回路 创建工程 server-hystrix How to Include Hystrix | 项目中如何包含 Hystrix To include Hystrix in your project, use the starter with a group ID of org.springframework.cloud and a artifact ID of spring-cloud-starter-netflix-hystrix. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 如何包含？第一步都一样，添加group ID到 pom.xml，注意自己的版本，我就不在翻译了。 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;server-hystrix&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;server-hystrix&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-02&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--Eureka-Client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 修改父工程pom.xml，在modules添加server-hystrix 1&lt;module&gt;server-hystrix&lt;/module&gt; The @HystrixCommand is provided by a Netflix contrib library called “javanica”. Spring Cloud automatically wraps Spring beans with that annotation in a proxy that is connected to the Hystrix circuit breaker. The circuit breaker calculates when to open and close the circuit and what to do in case of a failure. 官方给的例子很直观，添加@HystrixCommand注解，当服务调用失败的时候会调用fallbackMethod的服务。12345678910111213@Componentpublic class StoreIntegration &#123; @HystrixCommand(fallbackMethod = &quot;defaultStores&quot;) public Object getStores(Map&lt;String, Object&gt; parameters) &#123; //do stuff that might fail // 做那些可能失败的事情 &#125; public Object defaultStores(Map&lt;String, Object&gt; parameters) &#123; return /* something useful */; &#125;&#125; 修改下官方example 新建类StoreIntegration 12345678910111213141516171819202122232425262728293031package com.cyinfotech.serverhystrix;import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;import org.springframework.stereotype.Component;import java.util.Map;/** * @author 煮酒泛舟. * @title Component * @program sc-f-e-02 * @description * @createtime 2018-10-24 09:28 */@Componentpublic class StoreIntegration &#123; @HystrixCommand(fallbackMethod = &quot;defaultStores&quot;) public Object getStores(Map&lt;String, Object&gt; parameters) &#123; //do stuff that might fail throw new RuntimeException(&quot;call service fail.&quot;); &#125; public Object defaultStores(Map&lt;String, Object&gt; parameters) &#123; /* something useful */ return &quot;Sorry, error!!! fallback defaultStores service！&quot;; &#125;&#125; 修改启动类ServerHystrixApplication 123456789101112131415161718192021222324252627282930package com.cyinfotech.serverhystrix;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Map;@SpringBootApplication@EnableCircuitBreaker@EnableDiscoveryClient@RestControllerpublic class ServerHystrixApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(ServerHystrixApplication.class).web(true).run(args); &#125; @Autowired StoreIntegration storeIntegration; @RequestMapping(\"/\") public Object getHi (Map&lt;String, Object&gt; parameters)&#123; return storeIntegration.getStores(parameters); &#125;&#125; 修改配置文件 application.yml 123456789server: port: 8782eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: server-hystrix 先启动 eureka-server，再启动 server-hystrix, 访问浏览器 http://localhost:8782/，显示的是调用defaultStores服务的返回值. Sorry, error!!! fallback defaultStores service！ 本篇教程就到这，至于更深的教程我会加紧学习然后写出来。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-02/教程源码Github地址：sc-f-e-02教程源码Gitee地址：sc-f-e-02","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"【Spring Cloud】第一篇 Service Discovery | 服务发现 - Eureka","slug":"sc-f-e-01","date":"2018-10-22T10:41:43.000Z","updated":"2018-10-30T10:01:32.331Z","comments":true,"path":"sc-f-e-01/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-01/","excerpt":"Eureka 提供服务的注册，服务可以通过注册到Eureka然后被其他应用调用。","text":"Eureka 提供服务的注册，服务可以通过注册到Eureka然后被其他应用调用。 看到Spring Cloud 的文档里面是先讲的是Spring Cloud Config ，为了方便，或者说参考其他大佬的教程，我也会把Config放到后面写。 word &amp; phrase include 确实是包含的意思，但是我觉得翻译（根据语境去翻译）成使用是不是更舒服些 setting up 配置 provides 提供 meta-data 元数据 such as 例如 Note 注意 Spring Cloud NetflixNetflix 是一家媒体提供商，应该很厉害！ 官网文档中先列出的是Eureka客户端，我尝试先写Eureka Client 发现会提示以下错误，应该是在请求 Eureka server的时候报错， 因为我们根本没有创建。所以我先看Eureka server12NFO 25402 --- [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka serverERROR 25402 --- [main] c.n.d.s.t.d.RedirectingEurekaHttpClient : Request execution error 说明官方说明 Finchley的构建和工作环境应该是 Spring Boot 2.0.x, 预计不会在Spring Boot 1.5.x 中使用。 Finchley builds and works with Spring Boot 2.0.x, and is not expected to work with Spring Boot 1.5.x. Spring Cloud 需要使用Spring Boot，如果不会创建Spring Boot项目的看这里《Spring Boot | 使用Spring Initializr快速创建》！ 创建项目 新建好Spring Boot后，删除src文件 在pom.xml 中添加 Spring Cloud 配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-01&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;sc-f-e-01&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.5.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- Spring Cloud --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Finchley.SR1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; Service Discovery: Eureka Server | 服务发现：Eureka服务端How to Include Eureka Server | 项目中如何包含 Eureka Server 右键项目 &gt; New &gt; Module 新建 eureka-server 子工程 修改父工程pom.xml文件, 添加子工程。 123&lt;modules&gt; &lt;module&gt;eureka-server&lt;/module&gt;&lt;/modules&gt; To include Eureka Server in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-eureka-server. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 在项目中使用Eureka Server，需要配置 pom.xml, 根据你当前的Spring Cloud 版本在Spring Cloud Project page中可以查看详细说明。 eureka-server 的 pom.xml12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;eureka-server&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;eureka-server&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-01&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;!--Eureka-Server--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; How to Run a Eureka Server | 如何启动 Eureka Server在启动类添加 注解 @EnableEurekaServer Modify EurekaServerApplication 1234567891011121314package com.cyinfotech.eurekaserver;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@SpringBootApplication@EnableEurekaServerpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaServerApplication.class).web(true).run(args); &#125;&#125; Standalone Mode | 单机模式 Add application.yml 1234567891011server: port: 8761 # 端口eureka: instance: hostname: localhost # 主机 client: registerWithEureka: false #是否注册自己 fetchRegistry: false #是否注册自己 serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 服务地址 Start Open http://127.0.0.1:8761/ in your browser Instances currently registered with Eureka 是空的， 因为有没有服务注册! Service Discovery: Eureka Clients | 服务发现：Eureka客户端Eureka客户端可以理解为服务注册实际项目中需要曝光的服务。 How to Include Eureka Client | 如何使用Eureka客户端 右键项目 &gt; New &gt; Module 新建 eureka-client 子工程，和添加 server 一样 修改父工程pom.xml文件, 添加子工程。 1&lt;module&gt;eureka-client&lt;/module&gt; To include the Eureka Client in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-eureka-client. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 要使用Eureka Client 就要添加配置文件，完整pom.xml配置文件如下： 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;eureka-client&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;eureka-client&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-01&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--Eureka-Client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; Registering with Eureka | 注册 Eureka When a client registers with Eureka, it provides meta-data about itself — such as host, port, health indicator URL, home page, and other details. Eureka receives heartbeat messages from each instance belonging to a service. If the heartbeat fails over a configurable timetable, the instance is normally removed from the registry. 当注册Eureka时，它提供一些包括自己的源数据，例如：主机、端口、监听(心跳)地址、主页和其它详细信息。Eureka 通过每个实例的服务接受心跳消息。 如果心跳在配置的时间失败结束，那这个实例通常会删除注册。 修改启动Eureka Client 启动类1234567891011121314151617181920package com.cyinfotech.eurekaclient;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@RestControllerpublic class EurekaClientApplication &#123; @RequestMapping(\"/\") public String home() &#123; return \"Hello world\"; &#125; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaClientApplication.class).web(true).run(args); &#125;&#125; Note that the preceding example shows a normal Spring Boot application. By having spring-cloud-starter-netflix-eureka-client on the classpath, your application automatically registers with the Eureka Server. Configuration is required to locate the Eureka server, as shown in the following example: 注意前面的正常的 Spring boot 程序， 你的应用程序中添加spring-cloud-starter-netflix-eureka-client后将自动注册到Eureka Server, 如下所示： 123456server: port: 8781eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ 启动步骤： 1.EurekaServerApplication 2.EurekaClientApplication http://localhost:8761/ http://192.168.5.165:8781/ 以上 Eureka 的服务端和客户端（注册与发现）就讲完了，我也是第一次这么认真看官方文档，其实看下来发现也不难，其他人的文档里面也无非就直译了官方文档，但是每个人的理解不一样，所以还是推荐自己去看原版文档， 没有想象的那么难。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-01/教程源码Github地址：sc-f-e-01教程源码Gitee地址：sc-f-e-01","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"【Spring Cloud】目录篇 - 我是「煮酒泛舟」","slug":"sc-f-e-00","date":"2018-10-21T13:32:27.000Z","updated":"2018-10-31T09:08:55.090Z","comments":true,"path":"sc-f-e-00/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-00/","excerpt":"按照官方的文档学习Spring Cloud，官方的一般都会比较简单，不是很适合初学者，我在学习的时候也会参考别人的文章，但是也希望自己能独立的阅读官方文档学习最新的知识。也希望有大佬能告诉学习英文的方式！！！","text":"按照官方的文档学习Spring Cloud，官方的一般都会比较简单，不是很适合初学者，我在学习的时候也会参考别人的文章，但是也希望自己能独立的阅读官方文档学习最新的知识。也希望有大佬能告诉学习英文的方式！！！ 教程源码Github地址：https://github.com/lixhubei/SpringCloudEnglish教程源码Gitee地址：https://gitee.com/Lixhbs/SpringCloudEnglish 环境 Spring Boot: v2.0.4 Spring Cloud: Finchley SR1 IDEA JDK 1.8 说明目前网上Spring Cloud系列教程还是比较丰富的，例如：程序员DD - Spring Cloud基础教程、方志朋 - 史上最简单的 SpringCloud 教程等大佬的系列文章。 上面两位大佬的教程让我逐渐的了解并认识了Spring Cloud，学习任何一项技能还是希望能理解的透透的，所以根据终极学习法——费曼技巧我将我所了解的Spring Cloud写下来。 由于英语对程序员是非常重要的,可以看下这位大佬的文章老码农教你学英语，所以这里我也开始我阅读英文文档的第一步，如果大家有好的学习方法可以和我交流。以前也有无数次学习英语的冲动，每次都拿起各种背单词的APP苦学一两周，然并卵，Spring Cloud系列教程，我会以官方英文文档为主，和大家一起去搭建Spring Cloud框架。 Spring Cloud 简介个人理解为多个功能组成的一个微服务解决方案的体系，里面包括服务发现、服务消费、路由、断路器等等工具，看发布的版本就能看出，Spring Cloud 不是某一种技术，而是集很多东西为一体的，当某些功能发布了版本后，Spring Cloud才会跟着发布版本。 为什么去看英文文档为什么去看英文文档，就只有一个原因，因为最新的技术都是英文版的。怎么去学，我之前有看过一个人的（突然忘记名字了，想起来再不上来）有个透析法，但是要有一定的英语基础，由于我算是没有基础的所以我想结合这个透析法，然后自己琢磨下如何去学，因为技术文章和其他的文章有点不一样，技术文章里面有很多的专业术语,但是这些术语是有限的，所以看得多了就应该就会了。我们这种应该属于哑巴英语！ 目录 【Spring Cloud】目录篇 我是「煮酒泛舟」 【Spring Cloud】第一篇 Service Discovery | 服务发现 - Eureka 【Spring Cloud】第二篇 Circuit Breaker | 断路器 - Hystrix 【Spring Cloud】第三篇 Client Side Load Balancer | 负载均衡 - Ribbon 【Spring cloud】第四篇 Router and Filter | 路由和过滤器 - Zuul 欢迎关注我的公众号，跟我留言。","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"Spring Boot | 使用Spring Initializr快速创建","slug":"Spring-Boot-SI","date":"2018-10-16T03:23:08.000Z","updated":"2018-10-23T06:30:20.398Z","comments":true,"path":"Spring-Boot-SI/","link":"","permalink":"https://lixhbs.gitee.io/blog/Spring-Boot-SI/","excerpt":"简单快速搭建启动Spring Boot项目","text":"简单快速搭建启动Spring Boot项目 教程源码Github地址教程源码Gitee地址 Create New Prject | 创建新项目 选择 Spring Initializr 填好信息选择下一步 可以选择一些工具 创建好后项目会开始初始化，等待一下 修改启动类 SpringBootSiApplication 123456789101112131415161718192021package com.cyinfotech.springbootsi;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@RestControllerpublic class SpringBootSiApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringBootSiApplication.class, args); &#125; @RequestMapping(\"/\") public String getIndex () &#123; return \"Hello Spring Boot\"; &#125;&#125; 初始化完成后右上角启动|调试项目 启动信息 页面访问 ‘http://localhost:8080/&#39;","categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Boot/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Boot/"}]}]}