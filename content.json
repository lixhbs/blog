{"meta":{"title":"煮酒泛舟的技术栈","subtitle":null,"description":null,"author":"煮酒泛舟","url":"https://lixhbs.gitee.io/blog"},"pages":[{"title":"About","date":"2018-11-06T07:38:46.344Z","updated":"2018-09-12T10:57:21.357Z","comments":true,"path":"about/index.html","permalink":"https://lixhbs.gitee.io/blog/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-12T10:55:12.000Z","updated":"2018-09-12T10:58:20.616Z","comments":true,"path":"tags/index.html","permalink":"https://lixhbs.gitee.io/blog/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-09-12T10:53:41.000Z","updated":"2018-09-12T10:58:03.129Z","comments":true,"path":"categories/index.html","permalink":"https://lixhbs.gitee.io/blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"「Guide」逻辑与&&、逻辑或||、按位与&、按位或 |","slug":"Guide-001","date":"2019-02-21T03:51:56.000Z","updated":"2019-02-21T10:02:25.212Z","comments":true,"path":"Guide-001/","link":"","permalink":"https://lixhbs.gitee.io/blog/Guide-001/","excerpt":"题目：System.out.println(3 | 9); 与 &amp; 或“&amp;” 和 “&amp;&amp;” 、 “|”和”||”都是逻辑运算符,”&amp;”、”|” 是非短路的，”&amp;&amp;” 、”||”是短路的。","text":"题目：System.out.println(3 | 9); 与 &amp; 或“&amp;” 和 “&amp;&amp;” 、 “|”和”||”都是逻辑运算符,”&amp;”、”|” 是非短路的，”&amp;&amp;” 、”||”是短路的。 名称 符号 描述 逻辑与 &amp;&amp; 两边条件都得满足，如果前面的条件不满足就不会运算后面的条件 逻辑或 I 满足一个即可，但是会运算所有条件 按位与 &amp; 两边条件都得满足, 前面条件不满足也会运算后面的条件 按位或 II 满足一个即可 12345678910短路的情况之前第一个条件满足就不会执行后面的条件（所以没有异常）。System.out.println((1 != 1 &amp;&amp; 1 % 0 ==0)); &gt;&gt; falseSystem.out.println((1 == 1 || 1 % 0 ==0));&gt;&gt; true非短路的情况是不管前面几个条件是否满足都执行完所有逻辑运算。System.out.println((1 != 1 &amp; 1 % 0 ==0));System.out.println((1 == 1 | 1 % 0 ==0));&gt;&gt; Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero 按位与、或，还可以进行二进制运算 按位与：都为1时才为1，则为01234567891011121314System.out.println(0 &amp; 0); &gt;&gt; 0System.out.println(0 &amp; 1); &gt;&gt; 0System.out.println(1 &amp; 0); &gt;&gt; 0System.out.println(1 &amp; 1); &gt;&gt; 1 ``` 按位或：有一个1就为1，则为0 ```Java System.out.println(0 | 0); &gt;&gt; 0System.out.println(0 | 1); &gt;&gt; 1System.out.println(1 | 0); &gt;&gt; 1System.out.println(1 | 1); &gt;&gt; 1 题目解答3 | 9 就是按位或运算 3 &gt;&gt; 01019 &gt;&gt; 1001运算后 1101 转十进制 &gt;&gt; 11 12System.out.println(3 | 9);&gt;&gt; 11 (欢迎关注公众号)","categories":[{"name":"面试","slug":"面试","permalink":"https://lixhbs.gitee.io/blog/categories/面试/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://lixhbs.gitee.io/blog/tags/面试/"},{"name":"算法","slug":"算法","permalink":"https://lixhbs.gitee.io/blog/tags/算法/"}]},{"title":"「Linux」NFS环境的搭建及问题和解决方法","slug":"YC-NFS","date":"2019-01-22T04:00:00.000Z","updated":"2019-01-22T02:09:21.544Z","comments":true,"path":"YC-NFS/","link":"","permalink":"https://lixhbs.gitee.io/blog/YC-NFS/","excerpt":"运维大佬小羊倌丶 NFSNetwork File System 网络文件系统 功能 - unix/linux和linux`之间的文件共享 优点 - 局域网共享中最快 缺点 - 不支持跨平台","text":"运维大佬小羊倌丶 NFSNetwork File System 网络文件系统 功能 - unix/linux和linux`之间的文件共享 优点 - 局域网共享中最快 缺点 - 不支持跨平台 环境系统 CentOS 6.7 服务端 192.168.2.1 web1.jthy.com 客户端 192.168.2.2 web2.jthy.com 查看软件包是否安装1234$ rpm -qa | grep nfs## nfs-utils-1.3.0-0.33.el7.x86_64 主程序包$ rpm -qa | grep rpcbind## rpcbind-0.2.0-38.el7.x86_64 提供`rpc`协议 用来通信 安装方法12$ yum install nfs-utils rpcbind -y ## 服务端：`nfs`，`rpcbind`都需要安装，客户端只需要安装`nfs`即可。 配置需要共享的文件夹服务端/客户端123$ mkdir /longriseTIAD/TIAD$ chmod -R 777 /longriseTIAD$ chown -R tomcat:tomcat /longriesTIAD 配置共享目录 /longriseTIAD服务端1.生产环境下，共享给用户上传，下载等 12345$ vim /etc/exports## 共享资源 共享给谁（共享的属性）/longriseTIAD 192.168.2.2(rw,sync)/longriseTIAD 192.168.2.*(rw,sync)... 2.配置生效1$ exportfs -r 3.查看共享资源123$ showmount -e 192.168.2.1 Export list for 192.168.2.203:/data/lys 192.168.2.2/24,... 客户端1.查看共享资源123$ showmount -e 192.168.2.1Export list for 192.168.2.203:/data/lys 192.168.2.2/24,... 2.选择挂载方式 临时挂载语法：mount.nfs [服务器地址：服务器共享的目录] [本地挂载点] 1$ mount.nfs 192.168.2.1:/longriseTIAD /longriseTIAD 永久性挂载（建议生产环境下) 12#vim /etc/fstab192.168.2.1:/longriseTIAD /longriseTIAD nfs defaults 0 0 3.永久性挂载后，需要重读1#mount -a 查看是否挂载12345678$ df -hFilesystem Size Used Avail Use% Mounted on/dev/sda3 1.1T 31G 991G 3% /tmpfs 64G 456K 64G 1% /dev/shm/dev/sda2 9.5G 71M 9.0G 1% /boot/dev/sda1 5.9G 268K 5.9G 1% /boot/efi 192.168.2.1:/longriseTIAD 15T 1.3T 13T 10% /longriseTIAD 使用中会出现的问题1.出现服务器宕机的情况，处理办法12## 在客户端直接重读 $ mount -a 注意：有时候会出现mount -a 无效，然后umount以后，报错umount.nfs: /longriseTIAD: device is busy 1234## 解决方式$ fuser -kvm /longriseTIAD$ umount /longriseTIAD$ mount -a 2.当检查服务机和客户机的配置都正确，而且nfs和rpcbind都成功的启动了进程。使用命令mount -t nfs 192.168.2.1:、longriseTIAD /longriseTIAD出现了错误的提示：1$ mount.nfs: requested NFS version or transport protocol is not supported 这个原因很可能是由于网络原因导致你的nfs断了网，所以你应该重新启动1$ service nfs restart 3.系统版本问题 centos6与radhat6的系统具有兼容性，可用于共享 4.对于共享文件的备份问题 可在共享的客户端进行相应的脚本计划进行备份，不可做交互式备份，交互式会占用大量的io，影响网站的运行，导致系统宕机 作者：小羊倌丶博客地址：https://blog.csdn.net/weixin_43949342/article/details/86575220 (欢迎关注公众号)","categories":[{"name":"Linux","slug":"Linux","permalink":"https://lixhbs.gitee.io/blog/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://lixhbs.gitee.io/blog/tags/Linux/"},{"name":"NFS","slug":"NFS","permalink":"https://lixhbs.gitee.io/blog/tags/NFS/"}]},{"title":"「Issue」 Could not create connection to database server. Attempted reconnect 3 times. Giving up","slug":"issue-001","date":"2018-12-25T00:00:00.000Z","updated":"2019-02-21T08:24:52.384Z","comments":true,"path":"issue-001/","link":"","permalink":"https://lixhbs.gitee.io/blog/issue-001/","excerpt":"问题状态 - 暂时处理环境IDEA, DataGrip, Mysql 8.0.12 问题描述每次电脑重启后再次启动项目就会出现 Could not create connection to database server. Attempted reconnect 3 times. Giving up 错误。","text":"问题状态 - 暂时处理环境IDEA, DataGrip, Mysql 8.0.12 问题描述每次电脑重启后再次启动项目就会出现 Could not create connection to database server. Attempted reconnect 3 times. Giving up 错误。数据库连接配置 driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/ofit?autoReconnect=true&amp;useSSL=false username: root password: ********** 无法创建与数据库服务器的连接。尝试重新连接3次。放弃 网络处理方式归类为URL错误我找到几个blog里面推荐的URL配置 url=jdbc:mysql://127.0.0.1:3301/dream?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;autoReconnect=true&amp;failOverReadOnly=false jdbc.url=jdbc:mysql://192.168.9.102:3306/jeuc_2_1?useUnicode=true&amp;;characterEncoding=utf-8&amp;;autoReconnect=true&amp;;failOverReadOnly=false&amp;;testOnBorrow=true&amp;;validationQuery=select 1 我试过都不行。 暂时处理方式打开DataGrip 工具 Test Connection 然后在启动项目就好了。 具体原因不知道。。。 启动MySQL服务 sudo /usr/local/MySQL/support-files/mysql.server start 停止MySQL服务 sudo /usr/local/mysql/support-files/mysql.server stop 重启MySQL服务 sudo /usr/local/mysql/support-files/mysql.server restart","categories":[{"name":"Issue","slug":"Issue","permalink":"https://lixhbs.gitee.io/blog/categories/Issue/"}],"tags":[{"name":"Issue","slug":"Issue","permalink":"https://lixhbs.gitee.io/blog/tags/Issue/"}]},{"title":"【Spring Cloud】第二篇 Circuit Breaker | 断路器 - Hystrix","slug":"sc-f-e-02","date":"2018-12-16T13:36:17.497Z","updated":"2018-12-16T13:36:17.497Z","comments":true,"path":"sc-f-e-02/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-02/","excerpt":"服务意外跪掉后的处理方式，不至于所有的功能失效。","text":"服务意外跪掉后的处理方式，不至于所有的功能失效。 官方网站的这个图很形象,当服务跪掉后有一个fallback返回。 本教程在【参照官方英文文档学Spring Cloud】第一篇 Service Discovery | 服务发现 - Eureka的基础上添加代码。 word &amp; phrase Circuit Breaker 中断回路 创建工程 server-hystrix How to Include Hystrix | 项目中如何包含 Hystrix To include Hystrix in your project, use the starter with a group ID of org.springframework.cloud and a artifact ID of spring-cloud-starter-netflix-hystrix. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 如何包含？第一步都一样，添加group ID到 pom.xml，注意自己的版本，我就不在翻译了。 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;server-hystrix&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;server-hystrix&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-02&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--Eureka-Client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 修改父工程pom.xml，在modules添加server-hystrix 1&lt;module&gt;server-hystrix&lt;/module&gt; The @HystrixCommand is provided by a Netflix contrib library called “javanica”. Spring Cloud automatically wraps Spring beans with that annotation in a proxy that is connected to the Hystrix circuit breaker. The circuit breaker calculates when to open and close the circuit and what to do in case of a failure. 官方给的例子很直观，添加@HystrixCommand注解，当服务调用失败的时候会调用fallbackMethod的服务。12345678910111213@Componentpublic class StoreIntegration &#123; @HystrixCommand(fallbackMethod = &quot;defaultStores&quot;) public Object getStores(Map&lt;String, Object&gt; parameters) &#123; //do stuff that might fail // 做那些可能失败的事情 &#125; public Object defaultStores(Map&lt;String, Object&gt; parameters) &#123; return /* something useful */; &#125;&#125; 修改下官方example 新建类StoreIntegration 12345678910111213141516171819202122232425262728293031package com.cyinfotech.serverhystrix;import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;import org.springframework.stereotype.Component;import java.util.Map;/** * @author 煮酒泛舟. * @title Component * @program sc-f-e-02 * @description * @createtime 2018-10-24 09:28 */@Componentpublic class StoreIntegration &#123; @HystrixCommand(fallbackMethod = &quot;defaultStores&quot;) public Object getStores(Map&lt;String, Object&gt; parameters) &#123; //do stuff that might fail throw new RuntimeException(&quot;call service fail.&quot;); &#125; public Object defaultStores(Map&lt;String, Object&gt; parameters) &#123; /* something useful */ return &quot;Sorry, error!!! fallback defaultStores service！&quot;; &#125;&#125; 修改启动类ServerHystrixApplication 123456789101112131415161718192021222324252627282930package com.cyinfotech.serverhystrix;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Map;@SpringBootApplication@EnableCircuitBreaker@EnableDiscoveryClient@RestControllerpublic class ServerHystrixApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(ServerHystrixApplication.class).web(true).run(args); &#125; @Autowired StoreIntegration storeIntegration; @RequestMapping(\"/\") public Object getHi (Map&lt;String, Object&gt; parameters)&#123; return storeIntegration.getStores(parameters); &#125;&#125; 修改配置文件 application.yml 123456789server: port: 8782eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: server-hystrix 先启动 eureka-server，再启动 server-hystrix, 访问浏览器 http://localhost:8782/，显示的是调用defaultStores服务的返回值. Sorry, error!!! fallback defaultStores service！ 本篇教程就到这，至于更深的教程我会加紧学习然后写出来。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-02/教程源码Github地址：sc-f-e-02教程源码Gitee地址：sc-f-e-02","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"【Spring Cloud】第三篇 Client Side Load Balancer | 负载均衡 - Ribbon","slug":"sc-f-e-03","date":"2018-12-16T13:36:09.162Z","updated":"2018-12-16T13:36:09.162Z","comments":true,"path":"sc-f-e-03/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-03/","excerpt":"Ribbon是一个负载均衡的客户端，用来提高系统的处理能力，在之后的章节会讲到Feign它已经包含Ribbon。","text":"Ribbon是一个负载均衡的客户端，用来提高系统的处理能力，在之后的章节会讲到Feign它已经包含Ribbon。 本教程在【Spring Cloud】第二篇 Circuit Breaker | 断路器 - Hystrix的基础上添加代码。 word &amp; phrase load balancer 负载均衡器 section 章节 A central concept 核心想法 创建工程 server-ribbon How to Include Ribbon | 项目中如何包含 Ribbon To include Ribbon in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-ribbon. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 添加group ID到 pom.xml，注意自己的版本。 123456789101112131415161718192021222324252627282930&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;server-ribbon&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;server-ribbon&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-03&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 修改父工程pom.xml，在modules添加server-ribbon 1&lt;module&gt;server-ribbon&lt;/module&gt; 修改配置文件 application.yml 123456789server: port: 8783eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/spring: application: name: server-ribbon 修改启动类ServerRibbonApplication，添加RestTemplate @LoadBalanced的作用是让这个请求有负载均衡的能力。 1234567891011121314151617181920212223package com.cyinfotech.serverribbon;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.web.client.RestTemplate;@SpringBootApplication@EnableDiscoveryClientpublic class ServerRibbonApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ServerRibbonApplication.class, args); &#125; @Bean @LoadBalanced public RestTemplate restTemplate ()&#123; return new RestTemplate(); &#125;&#125; 添加HelloCyInfo服务类，调用其他实例，实现负载均衡 1234567891011121314151617181920212223package com.cyinfotech.serverribbon;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;/** * @author 煮酒泛舟. * @title * @program sc-f-e-03 * @description * @createtime 2018-10-28 09:38 */@Servicepublic class HelloCyInfo &#123; @Autowired RestTemplate restTemplate; public String helloCYIT(String name) &#123; return restTemplate.getForObject(&quot;http://server-hystrix/?name=&quot;+name,String.class); &#125;&#125; 添加RibbonController类，调用service 1234567891011121314151617181920212223242526package com.cyinfotech.serverribbon;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;/** * @author 煮酒泛舟. * @title * @program sc-f-e-03 * @description * @createtime 2018-10-28 09:44 */@RestControllerpublic class RibbonController &#123; @Autowired HelloCyInfo helloCyInfo; @RequestMapping(&quot;/&quot;) public String hiCYIT ( @RequestParam String name) &#123; return helloCyInfo.helloCYIT(name); &#125;&#125; 为了效果明显我们修改下server-hystrix的代码，将实例的端口打印出来； 12345678910111213141516171819202122232425262728293031323334353637package com.cyinfotech.serverhystrix;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.context.annotation.Configuration;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.Map;@SpringBootApplication@EnableCircuitBreaker@EnableDiscoveryClient@RestControllerpublic class ServerHystrixApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(ServerHystrixApplication.class).web(true).run(args); &#125; @Autowired StoreIntegration storeIntegration; @Value(\"$&#123;server.port&#125;\") String port; @RequestMapping(\"/\") public Object getHi (@RequestParam String name)&#123; return \"HI - \" + name + \"， port:\" + port + \", By server-hystrix.\"; &#125;&#125; 先启动 eureka-server，再启动 server-hystrix, 然后启动 server-ribbon 访问浏览器 http://localhost:8783/?name=cyit HI - cyit， port:8782, By server-hystrix. 修改实例server-hystrix的端口然后启动，如果启动不了需要在Configurations去掉Single instance only. 12server: port: 8786 ` 多次访问http://localhost:8783/?name=cyit ， 页面会交替显示端口号。 HI - cyit， port:8782, By server-hystrix.HI - cyit， port:8786, By server-hystrix. 本篇教程就到这，至于更深的教程我会加紧学习然后写出来。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-03/教程源码Github地址：sc-f-e-03教程源码Gitee地址：sc-f-e-03","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"},{"name":"Ribbon","slug":"Spring-Cloud/Ribbon","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/Ribbon/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"「Feign-Http」 Feign请求http接口","slug":"Feign-Http","date":"2018-12-16T03:07:11.000Z","updated":"2018-12-20T03:50:47.173Z","comments":true,"path":"Feign-Http/","link":"","permalink":"https://lixhbs.gitee.io/blog/Feign-Http/","excerpt":"没有接触Spring Cloud Feign的时候调用其他公司接口都是用java.net.URL或者org.apache.commons.httpclient, 现在可以使用Feign，使用起来比较简单。","text":"没有接触Spring Cloud Feign的时候调用其他公司接口都是用java.net.URL或者org.apache.commons.httpclient, 现在可以使用Feign，使用起来比较简单。 关于如何使用Feign可以查看【Spring cloud】第六篇 Declarative REST Client | 声明性客户端 - Feign 新建Spring cloud基础项目 创建eureka-server工程可以参考 【Spring Cloud】第一篇 Service Discovery | 服务发现 - Eureka 创建server-feign工程可以参考 【Spring cloud】第六篇 Declarative REST Client | 声明性客户端 - Feign 添加Feign接口 com.cyinfotech.serverfeign.services.ApiOpenService.java 在@FeignClient 设置url为http 基础地址，在各个方法上添加@PostMapping注解为api地址 1234567891011121314151617181920212223242526272829303132333435363738package com.cyinfotech.serverfeign.services;import org.springframework.cloud.openfeign.FeignClient;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;/** * @author 煮酒泛舟. * @title ApiOpen * @program feign-http * @description ApiOpen * @createtime 2018-12-16 11:43 */@FeignClient(url = \"https://api.apiopen.top\", value = \"ApiOpenService\")public interface ApiOpenService &#123; /** * 随机单句诗词推荐 * @return */ @PostMapping(\"/singlePoetry\") String singlePoetry(); /** * 随机一首诗词推荐 * @return */ @PostMapping(\"/recommendPoetry\") String recommendPoetry(); /** * 搜索古诗词 * @param name * @return */ @GetMapping(\"/searchPoetry\") String searchPoetry(@RequestParam(\"name\") String name);&#125; 在启动类添加测试代码添加注解@EnableFeignClients(clients = {ApiOpenService.class}) package com.cyinfotech.serverfeign; import com.cyinfotech.serverfeign.services.ApiOpenService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.web.bind.annotation.*; /** * @author 煮酒泛舟 * @date 2018年12月16日11:49:06 * */ @SpringBootApplication @EnableEurekaClient @RestController @EnableFeignClients(clients = {ApiOpenService.class}) @RequestMapping(\"/api\") public class ServerFeignApplication { public static void main(String[] args) { SpringApplication.run(ServerFeignApplication.class, args); } @Autowired ApiOpenService apiOpenService; @RequestMapping(\"/singlePoetry\") public String searchSinglePoetry() { return apiOpenService.singlePoetry(); } @RequestMapping(\"/recommendPoetry\") public String searchRecommendPoetry() { return apiOpenService.recommendPoetry(); } @GetMapping(\"/searchPoetry\") public String searchPoetry(@RequestParam(\"name\") String name) { return apiOpenService.searchPoetry(name); } } 启动 EurekaServerApplication &gt; ServerFeignApplication 访问：http://localhost:8085/api/singlePoetry {“code”:200,”message”:”成功!”,”result”:{“author”:”苏轼”,”origin”:”临江仙·夜饮东坡醒复醉”,”category”:”古诗文-人生-梦想”,”content”:”长恨此身非我有，何时忘却营营。”}} 访问：http://192.168.1.108:8085/api/recommendPoetry {“code”:200,”message”:”成功!”,”result”:{“title”:”送卢孟明还上都”,”content”:”江皋北风至，归客独伤魂。|楚水逢乡雁，平陵忆故园。|征骖嘶别馆，落日隐寒原。|应及秦川望，春华满国门。”,”authors”:”皎然”}} 访问：http://192.168.1.108:8085/api/searchPoetry?name=黄鹤楼 {“code”:200,”message”:”成功!”,”result”:[{“title”:”黄鹤楼”,”content”:”黄鹤何年去杳冥，高楼千载倚江城。|碧云朝卷四山景，流水夜传三峡声。|柳暗西州供骋望，草芳南浦遍离情。|登临一晌须回首，看却乡心万感生。”,”authors”:”卢郢”},{“title”:”黄鹤楼”,”content”:”云锁吕公洞，月明黄鹤楼。|抱关非故卒，谁见羽衣游。”,”authors”:”王十朋”},{“title”:”黄鹤楼”,”content”:”手把仙人绿玉枝，吾行忽及早秋期。|苍龙阙角归何晚，黄鹤楼中醉不知。|江汉交流波渺渺，晋唐遗迹草离离。|平生最喜听长笛，裂石穿云何处吹。”,”authors”:”陆游”},{“title”:”黄鹤楼”,”content”:”长江巨浪拍天浮，城郭相望万景收。|汉水北吞云梦入，蜀江西带洞庭流。|角声交送千家月，帆影中分两岸秋。|黄鹤楼高人不见，却随鹦鹉过汀洲。”,”authors”:”游似”},{“title”:”黄鹤楼”,”content”:”翚飞栋宇据城端，车马尘中得异观。|双眼莫供淮地阔，一江不尽蜀波寒。|老仙横笛月亭午，骚客怀乡日欲残。|独抚遗踪增慨慕，徘徊不忍下层栏。”,”authors”:”罗与之”},{“title”:”黄鹤楼”,”content”:”崔颢题诗在上头，登临何必更冥搜。|楼前黄鹤不重见，槛外长江空自流。|万顷烟云连梦泽，一川风景借西州。”,”authors”:”张颙”},{“title”:”黄鹤楼”,”content”:”昔人已乘白云去，旧国连天不知处。|思量费子真仙子，从他浮世悲生死。|黄鹤一去不复返，光阴流转忽已晚。”,”authors”:”王得臣”},{“title”:”黄鹤楼”,”content”:”登真者谁子，昔有费公祎。|白日玉书下，青天驾鹤飞。|此地少留憩，神标怅依依。|振裾谢尘浊，与尔方远违。|层楼宠陈迹，江山长四围。|登临美商素，雨气薄西晖。|水落州觜嫩，风豪帆背肥。|飘然起遐想，琳馆閟岩扉。|明月识悠阔，白云疑是非。|金桃未遽熟，薤露虞先晞。|高树两华表，长招羽驾归。|灵瓢五色剂，定与遗民挥。|自顾乏仙质，延生犹可希。|刀圭傥不吝，如饱首阳饥。”,”authors”:”贺铸”}]} 欢迎关注我的公众号，跟我留言。博客地址：https://blog.aprcode.com/Feign-Http/教程源码Github地址：Feign-Http教程源码Gitee地址：Feign-Http","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"「Spring Boot」Docker配置SSL证书（免费证书）","slug":"Spring-Boot-Docker-ssl","date":"2018-11-14T01:20:20.000Z","updated":"2018-12-20T03:52:10.759Z","comments":true,"path":"Spring-Boot-Docker-ssl/","link":"","permalink":"https://lixhbs.gitee.io/blog/Spring-Boot-Docker-ssl/","excerpt":"HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全。","text":"HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全。 教程以阿里云为例 备案域名后申请免费证书 购买证书 选择Symantec &gt; 免费型DV SSL 下载证书，以tomcat为例 以「Spring Boot」 推送Docker镜像到阿里云镜像服务项目代码为基础，新建spring-boot-docker-ssl项目 配置application.properties1234567891011121314151617server.port= 8099server.ssl.key-store= classpath:cert-1537941630836_www.aprcode.com.pfxserver.ssl.key-store-password= MOi6arPC``` Docker打包和推送请参考上两篇文章： [「Spring Boot」 Docker打包镜像](https://blog.aprcode.com/Spring-Boot-docker/) [「Spring Boot」 推送Docker镜像到阿里云镜像服务](https://blog.aprcode.com/Spring-Boot-Docker-Aliyun) 在服务器上登录镜像仓库获取最新镜像，并启动。 ```shell[root@izwz99u47743ten25slpjpz ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEregistry.cn-hangzhou.aliyuncs.com/aprcode/aprcode aprcode.2.0.0 279964124c46 14 minutes ago 119MBregistry.cn-hangzhou.aliyuncs.com/aprcode/aprcode aprcode.1.0.0 671bc04fb203 6 hours ago 119MB 访问https://www.aprcode.com:8099/ https://www.aprcode.com:8099/ 欢迎关注我的公众号，跟我留言。 博客地址：Spring-Boot-Docker-Aliyun教程源码Github地址：Spring-Boot-Docker-Aliyun教程源码Gitee地址：Spring-Boot-Docker-Aliyun","categories":[{"name":"Docker","slug":"Docker","permalink":"https://lixhbs.gitee.io/blog/categories/Docker/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Boot/"},{"name":"Docker","slug":"Docker","permalink":"https://lixhbs.gitee.io/blog/tags/Docker/"}]},{"title":"「Spring Boot」 推送Docker镜像到阿里云镜像服务","slug":"Spring-Boot-Docker-Aliyun","date":"2018-11-14T01:20:03.000Z","updated":"2018-12-20T03:51:16.412Z","comments":true,"path":"Spring-Boot-Docker-Aliyun/","link":"","permalink":"https://lixhbs.gitee.io/blog/Spring-Boot-Docker-Aliyun/","excerpt":"容器镜像服务（Container Registry）提供安全的应用镜像托管能力，精确的镜像安全扫描功能，稳定的镜像构建服务，便捷的镜像授权功能，方便用户进行镜像全生命周期管理。容器镜像服务简化了Registry的搭建运维工作，支持多地域的镜像托管，并联合容器服务等云产品，打造云上使用Docker的一体化体验。","text":"容器镜像服务（Container Registry）提供安全的应用镜像托管能力，精确的镜像安全扫描功能，稳定的镜像构建服务，便捷的镜像授权功能，方便用户进行镜像全生命周期管理。容器镜像服务简化了Registry的搭建运维工作，支持多地域的镜像托管，并联合容器服务等云产品，打造云上使用Docker的一体化体验。 新建SpringBoot应用并配置DockerFile参考「Spring Boot」 Docker打包镜像，新建Spring-Boot-Docker-Aliyun项目 修改配置文件application.properties1server.port= 8099 Docker 打包，打包过程参照「Spring Boot」 Docker打包镜像 开通阿里镜像服务访问https://dev.aliyun.com/search.html进入管理中心 创建命名空间 设置Registry登录密码，非阿里云登录密码 第一次创建会出现教程，和github 刚创建项目一样，会告知如果推送 推送镜像登录阿里云Docker Registry123$ docker login --username=134******93@163.com registry.cn-hangzhou.aliyuncs.com$ Password: $ Login Succeeded 将镜像推送到Registry docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/aprcode/aprcode:[镜像版本号] 123456789101112131415161718$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEaprcode/spring-boot-docker-aliyun latest 671bc04fb203 17 minutes ago 119MBopenjdk 8-jdk-alpine 97bc1352afde 2 weeks ago 103MB$ docker tag 671bc04fb203 registry.cn-hangzhou.aliyuncs.com/aprcode/aprcode:aprcode.1.0.0$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEaprcode/spring-boot-docker-aliyun latest 671bc04fb203 19 minutes ago 119MBregistry.cn-hangzhou.aliyuncs.com/aprcode/aprcode aprcode.1.0.0 671bc04fb203 19 minutes ago 119MBopenjdk 8-jdk-alpine 97bc1352afde 2 weeks ago 103MB$ docker push registry.cn-hangzhou.aliyuncs.com/aprcode/aprcode:aprcode.1.0.0The push refers to repository [registry.cn-hangzhou.aliyuncs.com/aprcode/aprcode]5c52652cc20a: Pushed ed6f0bd39121: Layer already exists 0c3170905795: Layer already exists df64d3292fd6: Layer already exists aprcode.1.0.0: digest: sha256:88df67826b192791332ee79659f091634f04764d6c3d0feacc5dfd0c8cab2333 size: 1159 因为我之前推送了一个，所以显示已存在， 不影响。 拉取镜像并启动推送成功后可以在任何一个地方登录你的仓库拉取镜像了，接下来我登录我的阿里轻量应用服务器拉取我们推送的镜像，并启动。服务器已安装Docker 登录服务器12345678$ ssh root@***** -p 22root@******'s password:Last failed login: Wed Nov 14 10:54:19 CST 2018 from 59.173.241.186 on ssh:nottyThere were 2 failed login attempts since the last successful login.Last login: Wed Nov 14 08:41:08 2018 from 59.173.241.186Welcome to Alibaba Cloud Elastic Compute Service ![root@izwz99u47743ten25slpjpz ~]# 登录阿里云Docker Registry 123[root@izwz99u47743ten25slpjpz ~]# docker login --username=134******93@163.com registry.cn-hangzhou.aliyuncs.comPassword: Login Succeeded 从Registry中拉取镜像 123456789[root@izwz99u47743ten25slpjpz ~]# docker pull registry.cn-hangzhou.aliyuncs.com/aprcode/aprcode:aprcode.1.0.0aprcode.1.0.0: Pulling from aprcode/aprcode4fe2ade4980c: Already exists6fc58a8d4ae4: Already existsef87ded15917: Already existsdf60cf9e6a56: Pull completeDigest: sha256:88df67826b192791332ee79659f091634f04764d6c3d0feacc5dfd0c8cab2333Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com/aprcode/aprcode:aprcode.1.0.0[root@izwz99u47743ten25slpjpz ~]# 启动镜像将80端口映射到内网8099 端口上123[root@izwz99u47743ten25slpjpz ~]# docker run -d -p 80:8099 671bc04fb203d38062b4eb07a40f6a80ac28c4ec38d992bc534fd7645a34401e3dfb67492b92[root@izwz99u47743ten25slpjpz ~]# 访问 http://www.aprcode.com/ {“name”:”aprcode.com”} 欢迎关注我的公众号，跟我留言。 博客地址：Spring-Boot-Docker-Aliyun教程源码Github地址：Spring-Boot-Docker-Aliyun教程源码Gitee地址：Spring-Boot-Docker-Aliyun","categories":[{"name":"Docker","slug":"Docker","permalink":"https://lixhbs.gitee.io/blog/categories/Docker/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Boot/"},{"name":"Docker","slug":"Docker","permalink":"https://lixhbs.gitee.io/blog/tags/Docker/"}]},{"title":"「Spring Boot」 Docker打包镜像","slug":"Spring-Boot-docker","date":"2018-11-12T08:31:30.000Z","updated":"2018-12-20T03:56:52.655Z","comments":true,"path":"Spring-Boot-docker/","link":"","permalink":"https://lixhbs.gitee.io/blog/Spring-Boot-docker/","excerpt":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。","text":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 Docker version 18.06.1-ce, build e68fc7a 新建SpringBoot应用参考《Spring Boot | 使用Spring Initializr快速创建》，新建demo项目 完整pom.xlm1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;demo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;docker.image.prefix&gt;cyinfo-demo&lt;/docker.image.prefix&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;docker-demo&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.6&lt;/version&gt; &lt;configuration&gt; &lt;repository&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/repository&gt; &lt;buildArgs&gt; &lt;JAR_FILE&gt;target/$&#123;project.build.finalName&#125;.jar&lt;/JAR_FILE&gt; &lt;/buildArgs&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 修改启动文件123456789101112131415161718192021222324252627282930package com.example.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import java.util.HashMap;import java.util.Map;@SpringBootApplication@Controllerpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125; @RequestMapping(\"/user/find\") @ResponseBody public Object findUser ()&#123; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(\"name\", \"aprcode.com\"); return map; &#125;&#125; 添加DockerFile文件在项目根目录添加DockerFile文件 12345FROM openjdk:8-jdk-alpineVOLUME /tmpARG JAR_FILECOPY $&#123;JAR_FILE&#125; app.jarENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"] 参数详解FROM1234567891011121314151617181920212223242526272829303132333435363738394041424344454647FROM &lt;image&gt; [AS &lt;name&gt;] 或 FROM &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;] 或 FROM &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]``` FROM为后续指令设置基础镜像,因此，有效的Dockerfile必须以FROM指令开头，镜像可以是任何有效图像 - 通过从[Public Repositories](https://docs.docker.com/get-started/#test-docker-installation)提取镜像来启动它尤其容易。- `ARG`是`Dockerfile`中唯一可以在`FROM`之前的指令。请参阅了解[ARG和FROM如何交互](https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact)。- `FROM`可以在单个`Dockerfile`中多次出现以创建多镜像，或者使用一个构建阶段作为另一个构建阶段的依赖项。只需在每个新的`FROM`指令之前记下提交输出的最后一个的镜像ID。每个FROM指令清除先前指令创建的任何状态。- tag或digest是可选的。如果省略其中任何一个，构建器将默认使用latest。如果构建器与tag值不匹配，则构建器将返回错误。##### RUN将在当前image之上的新层中执行任何命令，并提交结果。生成的已提交image将用于Dockerfile中的下一步。##### EXPOSE`EXPOSE`指令通知`Docker`容器在运行时侦听指定的网络端口。`EXPOSE`不使主机的容器的端口可访问。为此，必须使用-p标志发布一系列端口，或者使用-P标志发布所有暴露的端口。您可以公开一个端口号，并用另一个端口号在外部发布。##### VOLUME`VOLUME`指令创建具有指定名称的挂载点，并将其标记为从本机主机或其他容器保留外部挂载的卷。该值可以是JSON数组`VOLUME [&quot;/var/log/&quot;]`或具有多个参数的纯字符串，例如`VOLUME /var/log`或`VOLUME /var/log /var/db`。有关通过`Docker`客户端的更多信息/示例和安装说明，请参阅通过卷文档共享目录。##### ENTRYPOINT `ENTRYPOINT`是CMD指令更多指令可以参考[DockerFile 中文](https://www.baidu.com/s?wd=DockerFile%20%E4%B8%AD%E6%96%87&amp;rsv_spt=1&amp;rsv_iqid=0xb5acefd3000249b6&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=baiduhome_pg&amp;rsv_enter=0&amp;oq=DockerFile&amp;rsv_t=2076bK4Pozu6Yy%2F6NPAVffBVPIh5IQ79Gz8Zo5vfWZwuzPJ4o7eJlNINa4YTUgEpxWDA&amp;rsv_pq=d4550aa00000ceec&amp;inputT=877&amp;rsv_sug3=86&amp;rsv_sug1=64&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_sug4=877)#### 开始打包```shell$ mvn install dockerfile:build...[INFO] Successfully built 1699cc725e47[INFO] Successfully tagged cyinfo-demo/demo:latest[INFO] [INFO] Detected build of image with id 1699cc725e47[INFO] Building jar: /Users/li/SoftResourceSpace/Space/IDEA/demo/target/docker-demo-docker-info.jar[INFO] Successfully built cyinfo-demo/demo:latest[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 13.866 s[INFO] Finished at: 2018-11-12T19:36:25+08:00[INFO] ------------------------------------------------------------------------... 构建成功，期间如果有什么异常可以提交issue 12345$ docker images # 查看镜像REPOSITORY TAG IMAGE ID CREATED SIZEcyinfo-demo/demo latest 1699cc725e47 2 minutes ago 119MB$ docker run -d --name cyinfo -p 8081:8080 1699cc725e47 # 运行镜像自定义名称 cyinfo 访问 http://localhost:8081/user/find {“name”:”aprcode.com”} 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/Spring-Boot-docker/教程源码Github地址：demo教程源码Gitee地址：demo","categories":[{"name":"Docker","slug":"Docker","permalink":"https://lixhbs.gitee.io/blog/categories/Docker/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Boot/"},{"name":"Docker","slug":"Docker","permalink":"https://lixhbs.gitee.io/blog/tags/Docker/"}]},{"title":"【Spring cloud】第六篇 Declarative REST Client | 声明性客户端 - Feign","slug":"sc-f-e-06","date":"2018-11-06T04:00:00.000Z","updated":"2018-12-20T03:50:40.387Z","comments":true,"path":"sc-f-e-06/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-06/","excerpt":"Feign是一个声明性web服务客户端。它使编写web服务更简单，使用Feign时需创建一个接口并注解，它具有可拔插的注解支持，包括Feign注解和JAX-RS注解。Feign还支持可插拔编码器和解码器。Spring Cloud增加了对Spring MVC注释的支持，并使用了Spring Web中默认使用的相同HttpMessageConverters，在使用Feign时，Spring Cloud集成了Ribbon和Eureka以提供负载均衡的http客户端。","text":"Feign是一个声明性web服务客户端。它使编写web服务更简单，使用Feign时需创建一个接口并注解，它具有可拔插的注解支持，包括Feign注解和JAX-RS注解。Feign还支持可插拔编码器和解码器。Spring Cloud增加了对Spring MVC注释的支持，并使用了Spring Web中默认使用的相同HttpMessageConverters，在使用Feign时，Spring Cloud集成了Ribbon和Eureka以提供负载均衡的http客户端。 Feign is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same HttpMessageConverters used by default in Spring Web. Spring Cloud integrates Ribbon and Eureka to provide a load balanced http client when using Feign. 本教程在【Spring cloud】第五篇 Custom Zuul Filter | 自定义过滤器的基础上添加代码。 How to Include Feign | 如何包含 Feign To include Feign in your project use the starter with group org.springframework.cloud and artifact id spring-cloud-starter-openfeign. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 在项目中使用Feign，需要配置 pom.xml, 根据你当前的Spring Cloud版本在Spring Cloud Project page中可以查看详细说明。 创建server-feign工程 完整pom.xml 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;server-feign&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;server-feign&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-06&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;!--Eureka-Client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;``` `ServerFeignApplication`添加注解 package com.cyinfotech.serverfeign; import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.openfeign.EnableFeignClients; @SpringBootApplication@EnableFeignClients@EnableEurekaClientpublic class ServerFeignApplication { public static void main(String[] args) { SpringApplication.run(ServerFeignApplication.class, args); } } 12345678910111213 添加如下配置文件`application.yml` ```yamlspring: application: name: server-feignserver: port: 8085eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ 创建Feign服务接口CyinfoService，定义调用服务。12345678910111213141516171819package com.cyinfotech.serverfeign;import org.springframework.cloud.openfeign.FeignClient;import org.springframework.stereotype.Service;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;@FeignClient(\"eureka-client\")@Servicepublic interface CyinfoService &#123; @RequestMapping(method = RequestMethod.GET, value = \"/hi\") String hi (@RequestParam(value = \"name\") String name);&#125;``` 创建`Controller` package com.cyinfotech.serverfeign; import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController; /** @author 煮酒泛舟. @title controller @program sc-f-e-06 @description controller @createtime 2018-11-06 10:38*/@RestControllerpublic class CyinfoController { @Autowired CyinfoService cyinfoService; @RequestMapping(value = “/hi”) public String hi (@RequestParam(value = “name”) String name) { return cyinfoService.hi(name); }} ` 启动服务 eureka-server eureka-client server-feign 访问：http://localhost:8085/hi?name=cyinfo Hello world, by eureka-client. name：cyinfo 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-06/教程源码Github地址：sc-f-e-06教程源码Gitee地址：sc-f-e-06","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"「leetcode」反转整数","slug":"leetcode-002","date":"2018-11-05T11:00:00.000Z","updated":"2018-11-05T01:34:44.684Z","comments":true,"path":"leetcode-002/","link":"","permalink":"https://lixhbs.gitee.io/blog/leetcode-002/","excerpt":"给定一个 32 位有符号整数，将整数中的数字进行反转。","text":"给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:12输入: 123输出: 321 示例 2:12输入: -123输出: -321 示例 1:12输入: 120输出: 21 注意: 假设我们的环境只能存储32位有符号整数，其数值范围是 [−231, 231−1]。根据这个假设，如果反转后的整数溢出，则返回 0。 方法：弹出和推入数字 &amp; 溢出前进行检查思路 我们可以一次构建反转整数的一位数字。在这样做的时候，我们可以预先检查向原整数附加另一位数字是否会导致溢出。 算法 反转整数的方法可以与反转字符串进行类比。 我们想重复“弹出” xx 的最后一位数字，并将它“推入”到 rev 的后面。最后，rev 将与 x相反。 要在没有辅助堆栈/数组的帮助下 “弹出” 和 “推入” 数字，我们可以使用数学方法。 1234567//pop operation:pop = x % 10;x /= 10;//push operation:temp = rev * 10 + pop;rev = temp; 但是，这种方法很危险，因为当 temp=rev⋅10+pop 时会导致溢出。 幸运的是，事先检查这个语句是否会导致溢出很容易。 将输入值取余与rev*10相加翻转数，判断翻转的📚是否大于int的最大值和小于最小值.Integer.MIN_VALUE = -2147483648.Integer.MAX_VALUE = 2147483647.所以 当x &lt; (Integer.MIN_VALUE / 10 = -8) 时就会溢出.所以 当x &gt; (Integer.MAX_VALUE / 10 = 7) 时就会溢出. class Solution { public int reverse(int x) { int rev = 0; while (x != 0) { int pop = x % 10; x /= 10; if (rev &gt; Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 &amp;&amp; pop &gt; 7)) return 0; if (rev &lt; Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 &amp;&amp; pop &lt; -8)) return 0; rev = rev * 10 + pop; } return rev; } }","categories":[],"tags":[]},{"title":"「leetcode」两数之和","slug":"leetcode-001","date":"2018-10-31T02:04:19.000Z","updated":"2018-11-05T01:19:08.245Z","comments":true,"path":"leetcode-001/","link":"","permalink":"https://lixhbs.gitee.io/blog/leetcode-001/","excerpt":"给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。 你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。","text":"给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。 你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 我的解答（暴力） 12345678910111213class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; int n = nums.length; for (int i = 0; i &lt; n; i++) &#123; for (int m = i + 1; m &lt; n; m++) &#123; if ( target - nums[m] == nums[i] ) &#123; return new int[]&#123;i, m&#125;; &#125; &#125; &#125; return null; &#125;&#125; 题目理解 计算出这个数组中两个数字之和为目标数的索引，数组中同样的元素不能复用。 官方答案 方法一： 暴力解法，循环两次，耗时比较长。12345678910public int[] twoSum(int[] nums, int target) &#123; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = i + 1; j &lt; nums.length; j++) &#123; if (nums[j] == target - nums[i]) &#123; return new int[] &#123; i, j &#125;; &#125; &#125; &#125; throw new IllegalArgumentException(&quot;No two sum solution&quot;);&#125; 方法二 可以用哈希表存储元素和对应索引的位置，然后循环比对。由于先将所有的数据都存入HashMap，所以后面判断的时候需要判断是否重复使用。 12345678910111213public int[] twoSum(int[] nums, int target) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; map.put(nums[i], i); &#125; for (int i = 0; i &lt; nums.length; i++) &#123; int complement = target - nums[i]; if (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123; return new int[] &#123; i, map.get(complement) &#125;; &#125; &#125; throw new IllegalArgumentException(\"No two sum solution\");&#125; 方法三 参照第二种方法，我们可以一次完成，将目标值和元素的差在HashMap中查找，如果没有则放入HashMap中供下次查找。1234567891011public int[] twoSum(int[] nums, int target) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; int complement = target - nums[i]; if (map.containsKey(complement)) &#123; return new int[] &#123; map.get(complement), i &#125;; &#125; map.put(nums[i], i); &#125; throw new IllegalArgumentException(\"No two sum solution\");&#125;","categories":[],"tags":[]},{"title":"【Spring cloud】第五篇 Custom Zuul Filter | 自定义过滤器","slug":"sc-f-e-05","date":"2018-10-30T10:00:00.000Z","updated":"2018-12-20T03:50:36.430Z","comments":true,"path":"sc-f-e-05/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-05/","excerpt":"Zuul可以分为四种过滤类型：pre、route、post和error，可以根据项目实际情况选择不同的过滤类型，也可以按照filterOrder排序。","text":"Zuul可以分为四种过滤类型：pre、route、post和error，可以根据项目实际情况选择不同的过滤类型，也可以按照filterOrder排序。 本教程在【Spring cloud】第四篇 Router and Filter | 路由和过滤器 - Zuul的基础上添加代码。 Custom Zuul Filter Examples本篇将调试四种过滤类型。 to classify a filter by type. Standard types in Zuul are “pre” for pre-routing filtering, “route” for routing to an origin, “post” for post-routing filters, “error” for error handling. We also support a “static” type for static responses see StaticResponseFilter. Any filterType made be created or added and run by calling FilterProcessor.runFilters(type) pre - 预路由过滤 route - 路由中 post - 路由后 error - 错误处理 How to Write a Pre Filter Pre filters set up data in the RequestContext for use in filters downstream. The main use case is to set information required for route filters 预过滤器在RequestContext中设置数据，以便在下游过滤器中使用。主要用例是设置路由过滤器所需的信息 在server-zuul工程中新建类preZuulServer 可以在访问路有前校验是否有权限访问等操作。1234567891011121314151617181920212223242526272829303132333435363738394041424344@Componentpublic class preZuulFilter extends ZuulFilter &#123; @Override public String filterType() &#123; return PRE_TYPE; &#125; @Override public int filterOrder() &#123; // 过滤顺序 return 0; &#125; @Override public boolean shouldFilter() &#123; // 是否过滤 return true; &#125; @Override public Object run() throws ZuulException &#123; RequestContext requestContext = RequestContext.getCurrentContext(); HttpServletRequest request = requestContext.getRequest(); String name = request.getParameter(&quot;name&quot;); if (StringUtils.isNotEmpty(name) &amp;&amp; name.equals(&quot;CHYIT&quot;)) &#123; requestContext.setSendZuulResponse(true); &#125; else &#123; requestContext.setSendZuulResponse(false); try &#123; HttpServletResponse res = requestContext.getResponse(); res.setContentType(&quot;text/html;charset=UTF-8&quot;); res.setCharacterEncoding(&quot;UTF-8&quot;); res.getWriter().write(&quot;用户校验不通过！！！&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; return null; &#125;&#125; 修改eureka-client EurekaClientApplication类 123456789101112public class EurekaClientApplication &#123; @RequestMapping(&quot;/hi&quot;) public String home(String name) &#123; return &quot;Hello world, by eureka-client. name：&quot; + name; &#125; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaClientApplication.class).web(true).run(args); &#125;&#125; 访问：http://192.168.5.165:8084/ec/hi?name=name 用户校验不通过！！！ 放问：http://192.168.5.165:8084/ec/hi?name=CHYIT Hello world, by eureka-client. name：CHYIT 然后创建另外三个类型的过滤类 启动顺序eureka-server &gt; server-zuul 放问：http://192.168.5.165:8084/ec/hi?name=CHYIT GET &gt;&gt;&gt; run by PRE_TYPEGET &gt;&gt;&gt; run by ROUTE_TYPEGET &gt;&gt;&gt; run by ERROR_TYPE 然后启动eureka-client GET &gt;&gt;&gt; run by PRE_TYPEGET &gt;&gt;&gt; run by ROUTE_TYPEGET &gt;&gt;&gt; run by POST_TYPE 欢迎关注我的公众号，跟我留言。博客地址：https://blog.aprcode.com/sc-f-e-05/教程源码Github地址：sc-f-e-05教程源码Gitee地址：sc-f-e-05","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"【Spring cloud】第四篇 Router and Filter | 路由和过滤器 - Zuul","slug":"sc-f-e-04","date":"2018-10-29T07:00:01.000Z","updated":"2018-12-20T03:56:31.553Z","comments":true,"path":"sc-f-e-04/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-04/","excerpt":"路由是微服务架构不可或缺的一部分。例如，/可以映射到您的Web应用程序，/api/users映射到用户服务，/api/shop映射到商店服务。 Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器 Routing is an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM-based router and server-side load balancer from Netflix.","text":"路由是微服务架构不可或缺的一部分。例如，/可以映射到您的Web应用程序，/api/users映射到用户服务，/api/shop映射到商店服务。 Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器 Routing is an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM-based router and server-side load balancer from Netflix. 本教程在【Spring Cloud】第三篇 Client Side Load Balancer | 负载均衡 - Ribbon的基础上添加代码。 How to Include Zuul | 项目中如何包含 Zuul To include Zuul in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-zuul. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 添加group ID到 pom.xml，注意自己的版本。 Zuul有几种配置的方式跳过自动添加服务，将zuul.ignored-services 设置服务id列表的模式，如zuul.ignored-services = server-consume或zuul.ignored-services = * 将忽略掉指定或所有的服务，但是如果在路由列表中添加了指定的路由，将不会被忽略，如下所示,除users外将忽略所有服务。 1234zuul: ignoredServices: '*' routes: users: /myusers/** 要增加或者修改路由器规则，可以添加如下配置，浏览器访问/myusers会转发到users服务，如：/myusers/101转发到/101）。123zuul: routes: users: /myusers/** 要对路由器进行更精细的操作，可以指定独立的路径和ServerID（Eureka 服务发现），如下配置：12345zuul: routes: users: path: /myusers/** serviceId: users_service 也可以直接配置http路径的物理位置 12345zuul: routes: users: path: /myusers/** url: http://example.com/users_service 实际操作创建server-zuul工程 完整pom.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;server-zuul&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;server-zuul&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-04&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--Eureka-Client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 修改父工程pom.xml，在modules添加server-ribbon 1&lt;module&gt;server-zuul&lt;/module&gt; 修改ServerZuulApplication12345678910111213141516package com.cyinfotech.serverzuul; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.cloud.netflix.zuul.EnableZuulProxy; @SpringBootApplication @EnableDiscoveryClient @EnableZuulProxy public class ServerZuulApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ServerZuulApplication.class, args); &#125; &#125; 在application.yml中添加路由规则 1234567891011121314151617spring: application: name: server-zuulserver: port: 8084eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/zuul: routes: aa: path: /hy/** serviceId: server-hystrix bb: path: /ec/** serviceId: eureka-client 分别在server-hystrix和eureka-client中添加hi服务路径 ServerHystrixApplication 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.cyinfotech.serverhystrix;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.context.annotation.Configuration;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.Map;@SpringBootApplication@EnableCircuitBreaker@EnableDiscoveryClient@RestControllerpublic class ServerHystrixApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(ServerHystrixApplication.class).web(true).run(args); &#125; @Autowired StoreIntegration storeIntegration; @Value(&quot;$&#123;server.port&#125;&quot;) String port; @RequestMapping(&quot;/&quot;) public Object getHi (@RequestParam String name)&#123; return &quot;HI - &quot; + name + &quot;， port:&quot; + port + &quot;, By server-hystrix.&quot;; &#125; @RequestMapping(&quot;/hi&quot;) public Object hi ()&#123; return &quot;HI, By server-hystrix.&quot;; &#125;&#125; EurekaClientApplication package com.cyinfotech.eurekaclient; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @SpringBootApplication @EnableDiscoveryClient @RestController public class EurekaClientApplication { @RequestMapping(&quot;/hi&quot;) public String home() { return &quot;Hello world, by eureka-client.&quot;; } public static void main(String[] args) { new SpringApplicationBuilder(EurekaClientApplication.class).web(true).run(args); } } 访问路由路径:http://localhost:8084/ec/hi Hello world, by eureka-client. 访问路由路径:http://localhost:8084/hy/hi HI, By server-hystrix. 本篇教程就到这，至于更深的教程我会加紧学习然后写出来。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-04/教程源码Github地址：sc-f-e-04教程源码Gitee地址：sc-f-e-04","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"},{"name":"Router and Filter","slug":"Router-and-Filter","permalink":"https://lixhbs.gitee.io/blog/tags/Router-and-Filter/"}]},{"title":"【Spring Cloud】第一篇 Service Discovery | 服务发现 - Eureka","slug":"sc-f-e-01","date":"2018-10-22T10:41:43.000Z","updated":"2018-12-16T13:36:29.599Z","comments":true,"path":"sc-f-e-01/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-01/","excerpt":"Eureka 提供服务的注册，服务可以通过注册到Eureka然后被其他应用调用。","text":"Eureka 提供服务的注册，服务可以通过注册到Eureka然后被其他应用调用。 看到Spring Cloud 的文档里面是先讲的是Spring Cloud Config ，为了方便，或者说参考其他大佬的教程，我也会把Config放到后面写。 word &amp; phrase include 确实是包含的意思，但是我觉得翻译（根据语境去翻译）成使用是不是更舒服些 setting up 配置 provides 提供 meta-data 元数据 such as 例如 Note 注意 Spring Cloud NetflixNetflix 是一家媒体提供商，应该很厉害！ 官网文档中先列出的是Eureka客户端，我尝试先写Eureka Client 发现会提示以下错误，应该是在请求 Eureka server的时候报错， 因为我们根本没有创建。所以我先看Eureka server12NFO 25402 --- [main] com.netflix.discovery.DiscoveryClient : Getting all instance registry info from the eureka serverERROR 25402 --- [main] c.n.d.s.t.d.RedirectingEurekaHttpClient : Request execution error 说明官方说明 Finchley的构建和工作环境应该是 Spring Boot 2.0.x, 预计不会在Spring Boot 1.5.x 中使用。 Finchley builds and works with Spring Boot 2.0.x, and is not expected to work with Spring Boot 1.5.x. Spring Cloud 需要使用Spring Boot，如果不会创建Spring Boot项目的看这里《Spring Boot | 使用Spring Initializr快速创建》！ 创建项目 新建好Spring Boot后，删除src文件 在pom.xml 中添加 Spring Cloud 配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-01&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;sc-f-e-01&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.5.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- Spring Cloud --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Finchley.SR1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; Service Discovery: Eureka Server | 服务发现：Eureka服务端How to Include Eureka Server | 项目中如何包含 Eureka Server 右键项目 &gt; New &gt; Module 新建 eureka-server 子工程 修改父工程pom.xml文件, 添加子工程。 123&lt;modules&gt; &lt;module&gt;eureka-server&lt;/module&gt;&lt;/modules&gt; To include Eureka Server in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-eureka-server. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 在项目中使用Eureka Server，需要配置 pom.xml, 根据你当前的Spring Cloud 版本在Spring Cloud Project page中可以查看详细说明。 eureka-server 的 pom.xml12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;eureka-server&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;eureka-server&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-01&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;!--Eureka-Server--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; How to Run a Eureka Server | 如何启动 Eureka Server在启动类添加 注解 @EnableEurekaServer Modify EurekaServerApplication 1234567891011121314package com.cyinfotech.eurekaserver;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@SpringBootApplication@EnableEurekaServerpublic class EurekaServerApplication &#123; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaServerApplication.class).web(true).run(args); &#125;&#125; Standalone Mode | 单机模式 Add application.yml 1234567891011server: port: 8761 # 端口eureka: instance: hostname: localhost # 主机 client: registerWithEureka: false #是否注册自己 fetchRegistry: false #是否注册自己 serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 服务地址 Start Open http://127.0.0.1:8761/ in your browser Instances currently registered with Eureka 是空的， 因为有没有服务注册! Service Discovery: Eureka Clients | 服务发现：Eureka客户端Eureka客户端可以理解为服务注册实际项目中需要曝光的服务。 How to Include Eureka Client | 如何使用Eureka客户端 右键项目 &gt; New &gt; Module 新建 eureka-client 子工程，和添加 server 一样 修改父工程pom.xml文件, 添加子工程。 1&lt;module&gt;eureka-client&lt;/module&gt; To include the Eureka Client in your project, use the starter with a group ID of org.springframework.cloud and an artifact ID of spring-cloud-starter-netflix-eureka-client. See the Spring Cloud Project page for details on setting up your build system with the current Spring Cloud Release Train. 要使用Eureka Client 就要添加配置文件，完整pom.xml配置文件如下： 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;eureka-client&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;eureka-client&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;com.cyinfotech&lt;/groupId&gt; &lt;artifactId&gt;sc-f-e-01&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--Eureka-Client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; Registering with Eureka | 注册 Eureka When a client registers with Eureka, it provides meta-data about itself — such as host, port, health indicator URL, home page, and other details. Eureka receives heartbeat messages from each instance belonging to a service. If the heartbeat fails over a configurable timetable, the instance is normally removed from the registry. 当注册Eureka时，它提供一些包括自己的源数据，例如：主机、端口、监听(心跳)地址、主页和其它详细信息。Eureka 通过每个实例的服务接受心跳消息。 如果心跳在配置的时间失败结束，那这个实例通常会删除注册。 修改启动Eureka Client 启动类1234567891011121314151617181920package com.cyinfotech.eurekaclient;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@RestControllerpublic class EurekaClientApplication &#123; @RequestMapping(\"/\") public String home() &#123; return \"Hello world\"; &#125; public static void main(String[] args) &#123; new SpringApplicationBuilder(EurekaClientApplication.class).web(true).run(args); &#125;&#125; Note that the preceding example shows a normal Spring Boot application. By having spring-cloud-starter-netflix-eureka-client on the classpath, your application automatically registers with the Eureka Server. Configuration is required to locate the Eureka server, as shown in the following example: 注意前面的正常的 Spring boot 程序， 你的应用程序中添加spring-cloud-starter-netflix-eureka-client后将自动注册到Eureka Server, 如下所示： 123456server: port: 8781eureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/ 启动步骤： 1.EurekaServerApplication 2.EurekaClientApplication http://localhost:8761/ http://192.168.5.165:8781/ 以上 Eureka 的服务端和客户端（注册与发现）就讲完了，我也是第一次这么认真看官方文档，其实看下来发现也不难，其他人的文档里面也无非就直译了官方文档，但是每个人的理解不一样，所以还是推荐自己去看原版文档， 没有想象的那么难。 欢迎关注我的公众号，跟我留言。 博客地址：https://blog.aprcode.com/sc-f-e-01/教程源码Github地址：sc-f-e-01教程源码Gitee地址：sc-f-e-01","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"【Spring Cloud】目录篇 - 我是「煮酒泛舟」","slug":"sc-f-e-00","date":"2018-10-21T13:32:27.000Z","updated":"2018-12-16T13:36:41.432Z","comments":true,"path":"sc-f-e-00/","link":"","permalink":"https://lixhbs.gitee.io/blog/sc-f-e-00/","excerpt":"按照官方的文档学习Spring Cloud，官方的一般都会比较简单，不是很适合初学者，我在学习的时候也会参考别人的文章，但是也希望自己能独立的阅读官方文档学习最新的知识。也希望有大佬能告诉学习英文的方式！！！","text":"按照官方的文档学习Spring Cloud，官方的一般都会比较简单，不是很适合初学者，我在学习的时候也会参考别人的文章，但是也希望自己能独立的阅读官方文档学习最新的知识。也希望有大佬能告诉学习英文的方式！！！ 教程源码Github地址：https://github.com/lixhubei/SpringCloudEnglish教程源码Gitee地址：https://gitee.com/Lixhbs/SpringCloudEnglish 环境 Spring Boot: v2.0.4 Spring Cloud: Finchley SR1 IDEA JDK 1.8 说明目前网上Spring Cloud系列教程还是比较丰富的，例如：程序员DD - Spring Cloud基础教程、方志朋 - 史上最简单的 SpringCloud 教程等大佬的系列文章。 上面两位大佬的教程让我逐渐的了解并认识了Spring Cloud，学习任何一项技能还是希望能理解的透透的，所以根据终极学习法——费曼技巧我将我所了解的Spring Cloud写下来。 由于英语对程序员是非常重要的,可以看下这位大佬的文章老码农教你学英语，所以这里我也开始我阅读英文文档的第一步，如果大家有好的学习方法可以和我交流。以前也有无数次学习英语的冲动，每次都拿起各种背单词的APP苦学一两周，然并卵，Spring Cloud系列教程，我会以官方英文文档为主，和大家一起去搭建Spring Cloud框架。 Spring Cloud 简介个人理解为多个功能组成的一个微服务解决方案的体系，里面包括服务发现、服务消费、路由、断路器等等工具，看发布的版本就能看出，Spring Cloud 不是某一种技术，而是集很多东西为一体的，当某些功能发布了版本后，Spring Cloud才会跟着发布版本。 为什么去看英文文档为什么去看英文文档，就只有一个原因，因为最新的技术都是英文版的。怎么去学，我之前有看过一个人的（突然忘记名字了，想起来再不上来）有个透析法，但是要有一定的英语基础，由于我算是没有基础的所以我想结合这个透析法，然后自己琢磨下如何去学，因为技术文章和其他的文章有点不一样，技术文章里面有很多的专业术语,但是这些术语是有限的，所以看得多了就应该就会了。我们这种应该属于哑巴英语！ 目录 【Spring Cloud】目录篇 我是「煮酒泛舟」 【Spring Cloud】第一篇 Service Discovery | 服务发现 - Eureka 【Spring Cloud】第二篇 Circuit Breaker | 断路器 - Hystrix 【Spring Cloud】第三篇 Client Side Load Balancer | 负载均衡 - Ribbon 【Spring cloud】第四篇 Router and Filter | 路由和过滤器 - Zuul 欢迎关注我的公众号，跟我留言。","categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/categories/Spring-Cloud/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Cloud/"}]},{"title":"Spring Boot | 使用Spring Initializr快速创建","slug":"Spring-Boot-SI","date":"2018-10-16T03:23:08.000Z","updated":"2018-12-20T03:56:22.589Z","comments":true,"path":"Spring-Boot-SI/","link":"","permalink":"https://lixhbs.gitee.io/blog/Spring-Boot-SI/","excerpt":"简单快速搭建启动Spring Boot项目","text":"简单快速搭建启动Spring Boot项目 教程源码Github地址教程源码Gitee地址 Create New Prject | 创建新项目 选择 Spring Initializr 填好信息选择下一步 可以选择一些工具 创建好后项目会开始初始化，等待一下 修改启动类 SpringBootSiApplication 123456789101112131415161718192021package com.cyinfotech.springbootsi;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@RestControllerpublic class SpringBootSiApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringBootSiApplication.class, args); &#125; @RequestMapping(\"/\") public String getIndex () &#123; return \"Hello Spring Boot\"; &#125;&#125; 初始化完成后右上角启动|调试项目 启动信息 页面访问 ‘http://localhost:8080/&#39; 欢迎关注我的公众号，跟我留言。","categories":[],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://lixhbs.gitee.io/blog/tags/Spring-Boot/"}]}]}